Config:
  add_or_update_secret: |
    #!/usr/bin/env bash

    function common::run_hook() {
      if [[ $1 == "--config" ]] ; then
        hook::config
      else
        hook::trigger
      fi
    }

    function kubectl::replace_or_create() {
      object=$(cat)

      if ! kubectl get -f - <<< "$object" >/dev/null 2>/dev/null; then
        kubectl create -f - <<< "$object" >/dev/null
      else
        kubectl replace --force -f - <<< "$object" >/dev/null
      fi
    }

    hook::config() {
      cat <<EOF
    {
      "configVersion":"v1",
      "kubernetes": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "executeHookOnEvent": [
            "Added",
            "Modified"
          ],
          "nameSelector": {
            "matchNames": [
              "registry-secret"
            ]
          },
          "namespace": {
            "nameSelector": {
              "matchNames": [
                "default"
              ]
            }
          }
        }
      ]
    }
    EOF
    }

    hook::trigger() {
      # ignore Synchronization for simplicity
      type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
      if [[ $type == "Synchronization" ]] ; then
        echo Got Synchronization event
        exit 0
      fi

      for secret in $(jq -r '.[] | .object.metadata.name' $BINDING_CONTEXT_PATH)
      do
        # loop through every namespace except 'default'
        for namespace in $(kubectl get namespace -o json |
                          jq -r '.items[] |
                            select((.metadata.name == "default" | not) and .status.phase == "Active") | .metadata.name')
        do
          # copy secret with a necessary data
          kubectl -n default get secret $secret -o json | \
            jq -r ".metadata.namespace=\"${namespace}\" |
                    .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\", \"labels\"])))" \
            | kubectl::replace_or_create
        done
      done
    }

    common::run_hook "$@"
  create_namespace: |
    #!/usr/bin/env bash

    function common::run_hook() {
      if [[ $1 == "--config" ]] ; then
        hook::config
      else
        hook::trigger
      fi
    }

    function kubectl::replace_or_create() {
      object=$(cat)

      if ! kubectl get -f - <<< "$object" >/dev/null 2>/dev/null; then
        kubectl create -f - <<< "$object" >/dev/null
      else
        kubectl replace --force -f - <<< "$object" >/dev/null
      fi
    }

    hook::config() {
      cat <<EOF
    {
      "configVersion":"v1",
      "kubernetes": [
        {
          "apiVersion": "v1",
          "kind": "namespace",
          "executeHookOnEvent": [
            "Added"
          ]
        }
      ]
    }
    EOF
    }

    hook::trigger() {
      # ignore Synchronization for simplicity
      # TODO: check each namespace in .[0].objects
      type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
      if [[ $type == "Synchronization" ]] ; then
        echo Got Synchronization event
        exit 0
      fi


      for namespace in $(jq -r '.[] | .object.metadata | select(.name == "default" | not ) | .name' $BINDING_CONTEXT_PATH);
      do
        for secret in $(kubectl -n default get secret -l secret-copier=yes -o name);
        do
          kubectl -n default get $secret -o json | \
            jq -r ".metadata.namespace=\"${namespace}\" |
                    .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\", \"labels\"])))" \
            | kubectl::replace_or_create
        done
      done
    }
    common::run_hook "$@"
  delete_secret: |
    #!/usr/bin/env bash

    function common::run_hook() {
      if [[ $1 == "--config" ]] ; then
        hook::config
      else
        hook::trigger
      fi
    }

    function kubectl::replace_or_create() {
      object=$(cat)

      if ! kubectl get -f - <<< "$object" >/dev/null 2>/dev/null; then
        kubectl create -f - <<< "$object" >/dev/null
      else
        kubectl replace --force -f - <<< "$object" >/dev/null
      fi
    }

    hook::config() {
      cat <<EOF
    {
      "configVersion": "v1",
      "kubernetes": [
        {
          "apiVersion": "v1",
          "kind": "secret",
          "executeHookOnEvent": [
            "Deleted"
          ],
          "labelSelector": {
            "matchLabels": {
              "secret-copier": "yes"
            }
          },
          "namespace": {
            "nameSelector": {
              "matchNames": [
                "default"
              ]
            }
          }
        }
      ]
    }
    EOF
    }

    hook::trigger() {
      # ignore Synchronization for simplicity
      type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
      if [[ $type == "Synchronization" ]] ; then
        echo Got Synchronization event
        exit 0
      fi

      for secret in $(jq -r '.[] | .object.metadata.name' $BINDING_CONTEXT_PATH)
        do
          for namespace in $(kubectl get namespace -o json |
                              jq -r '.items[] |
                                select((.metadata.name == "default" | not) and .status.phase == "Active") | .metadata.name')
          do
            kubectl -n $namespace delete secret $secret
          done
        done
    }

    common::run_hook "$@"
  schedule_sync_secret: | 
    #!/usr/bin/env bash
    #
    # Hook with a schedule binding: sync secrets with the 'secret-copier: yes' label from the 'default' namespace to the other namespaces.
    #

    function common::run_hook() {
      if [[ $1 == "--config" ]] ; then
        hook::config
      else
        hook::trigger
      fi
    }

    function kubectl::replace_or_create() {
      object=$(cat)

      if ! kubectl get -f - <<< "$object" >/dev/null 2>/dev/null; then
        kubectl create -f - <<< "$object" >/dev/null
      else
        kubectl replace --force -f - <<< "$object" >/dev/null
      fi
    }

    hook::config() {
      cat <<EOF
    {
      "configVersion": "v1",
      "schedule": [
        {
          "allowFailure": true,
          "crontab": "* * * * *"
        }
      ]
    }
    EOF
    }

    hook::trigger() {
      # Copy secrets to the other namespaces.
      for secret in $(kubectl -n default get secret -l secret-copier=yes -o name);
        do
        for namespace in $(kubectl get namespace -o json |
                            jq -r '.items[] |
                              select((.metadata.name == "default" | not) and .status.phase == "Active") | .metadata.name')
        do
          kubectl -n default get $secret -o json | \
            jq -r ".metadata.namespace=\"${namespace}\" |
                    .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\", \"labels\"])))" \
            | kubectl::replace_or_create
        done
      done

      # Delete secrets with the 'secret-copier: yes' label in namespaces except 'default', which are not exist in the 'default' namespace.
      kubectl get secret --all-namespaces -o json | \
        jq -r '([.items[] | select(.metadata.labels."secret-copier" == "yes" and .metadata.namespace == "default").metadata.name]) as $secrets |
                .items[] | select(.metadata.labels."secret-copier" == "yes" and .metadata.namespace != "default" and ([.metadata.name] | inside($secrets) | not)) |
                "\(.metadata.namespace) secret \(.metadata.name)"' | \
        while read -r secret
        do
          kubectl delete -n $secret
        done
    }

    common::run_hook "$@"